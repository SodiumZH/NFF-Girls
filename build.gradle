buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
        // Mixin required
        maven { 
        	url = 'https://repo.spongepowered.org/repository/maven-public/' 
        	content { includeGroup "org.spongepowered" }
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'      
        // Mixin required 
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
// Mixin required
apply plugin: 'org.spongepowered.mixin'

mixin {
    //add sourceSets.main, 'befriendmobs.refmap.json'
    //add sourceSets.main, 'dummmmmmy.refmap.json'
    add sourceSets.main, 'dwmg.refmap.json'
    //config 'befriendmobs.mixins.json'
    config 'dwmg.mixins.json'

	// Only for Citadel support    
    //add sourceSets.main, "citadel.refmap.json"
}


version = "${mod_version}"
group = 'net.sodiumstudio.dwmg' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "dwmg-${mc_version}"

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

//jarJar.enable()
tasks.jarJar.configure {
  archiveClassifier = ''
}

minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://github.com/ParchmentMC/Parchment/wiki/Getting-Started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    //mappings channel: 'official', version: '1.18.2'
    mappings channel: 'parchment', version: "2022.08.14-1.19.2"

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'dwmg'
           // property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
            
            property 'mixin.debug.export', 'true'
			property 'mixin.debug.export.decompile', 'true'
            
            
            /** For Alex support */
            //arg "-mixin.config="+"citadel.mixins.json"

            mods {
                dwmg {
                    source sourceSets.main
                }
            }
        }
		
        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'dwmg'

            mods {
                dwmg {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        /*gameTestServer {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'dwmg'

            mods {
                dwmg {
                    source sourceSets.main
                }
            }
        }*/

        /*data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            //args '--mod', 'dwmg', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                dwmg {
                    source sourceSets.main
                }
            }
        }*/
    }
}

// Include resources generated by data generators.
//sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
     // Put repositories for dependencies here
			
	flatDir {
		dirs "libs"
	}
	
	/*maven {
		url uri("libs")
	}*/
	
	maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
  
    maven {
  		name = "Jared Maven"
  		url = "https://maven.blamejared.com/"
  			}
 	/* maven {
  		  // location of a maven mirror for JEI files, as a fallback
    	name = "ModMaven"
   		url = "https://modmaven.dev"
  	}*/

	//maven { url = 'https://maven.parchmentmc.org' }
}

dependencies {

    minecraft 'net.minecraftforge:forge:1.19.2-43.2.14'

	// Mixin required
	annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
	    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:0.2.1"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.2.1")) {
        jarJar.ranged(it, "[0.2,)")
    }
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
	compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")
	runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")
	implementation fg.deobf("blank:befriendmobs-${mc_version}:${bm_version}")
	jarJar(group: 'net.sodiumstudio.befriendmobs', name: 'befriendmobs', version: "[${mc_version}-${bm_version}, ${mc_version}-${bm_version_next})"){
		jarJar.pin(it, "${mc_version}-${bm_version}")
	}
    implementation fg.deobf("curse.maven:jade-324717:4433884")


    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

    implementation fg.deobf("curse.maven:hmag-537613:5391696")
	implementation fg.deobf("curse.maven:tf-227639:4389567")
	implementation fg.deobf("curse.maven:gog4-228948:4683679")
	//implementation fg.deobf("curse.maven:mobpets-941037:4907694")
	implementation fg.deobf("curse.maven:patchouli-306770:4031402")
	
	// Testing compat mods
	implementation fg.deobf("curse.maven:moonlight-499980:4312303")
	implementation fg.deobf("curse.maven:testdummy-225738:4410143")
	implementation fg.deobf("curse.maven:citadel-331936:4556677")
	implementation fg.deobf("curse.maven:am-426558:4159154")	
	implementation fg.deobf("curse.maven:iaf-264231:5037952")
	implementation fg.deobf("curse.maven:bop-220318:4473556")
	implementation fg.deobf("curse.maven:terrablender-563928:4618490")
	implementation fg.deobf("curse.maven:corgilib-693313:4554111")
	implementation fg.deobf("curse.maven:geckolib-388172:4407241")
	implementation fg.deobf("curse.maven:byg-247560:5116293")
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
	archiveClassifier = 'slim'
    manifest {
        attributes([
                "Specification-Title"     : "dwmg",
                "Specification-Vendor"    : "sodiumstudio",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "sodiumstudio",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
reobf {
	jarJar {}
}
// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')
/*
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}
*/
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

